#!/usr/bin/env python3
import argparse
import os
import subprocess

import openai

def run(cmd: str) -> str:
    try:
        return subprocess.check_output(cmd, shell=True, text=True)
    except subprocess.CalledProcessError as e:
        return e.output

def get_staged_files():
    output = run("git diff --cached --name-only").strip()
    if not output:
        return []
    return output.splitlines()

def get_diff_stats():
    output = run("git diff --cached --numstat").strip()
    stats = []
    total_add = 0
    total_del = 0
    for line in output.splitlines():
        parts = line.split('\t')
        if len(parts) != 3:
            continue
        added, deleted, filename = parts
        try:
            added = int(added)
            deleted = int(deleted)
        except ValueError:
            continue
        stats.append((filename, added, deleted))
        total_add += added
        total_del += deleted
    return stats, total_add, total_del

def generate_commit_message(stats, total_add, total_del, lang: str) -> str:
    """Generate a commit message using OpenAI."""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise RuntimeError("OPENAI_API_KEY environment variable is not set")
    openai.api_key = api_key

    stats_text = "\n".join(
        f"{filename}: +{added} -{deleted}" for filename, added, deleted in stats
    )
    language = "Korean" if lang == "ko" else "English"
    prompt = (
        f"Write a concise git commit message in {language} using the conventional commit "
        "style such as feat, fix, refactor, or chore based on the following changes:\n"
        f"{stats_text}\nTotal additions: {total_add}, deletions: {total_del}."
    )

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": "You are an assistant that writes git commit messages.",
            },
            {"role": "user", "content": prompt},
        ],
        temperature=0.5,
        max_tokens=60,
    )
    return response["choices"][0]["message"]["content"].strip()


def main():
    parser = argparse.ArgumentParser(description="AI-powered git commit helper")
    parser.add_argument(
        "-e", action="store_true", help="Generate commit message in English"
    )
    parser.add_argument(
        "-k", action="store_true", help="Generate commit message in Korean"
    )
    args = parser.parse_args()

    lang = "ko"
    if args.e:
        lang = "en"
    elif args.k:
        lang = "ko"

    files = get_staged_files()
    if not files:
        print("스테이징된 변경사항이 없습니다.")
        return

    stats, total_add, total_del = get_diff_stats()
    try:
        message = generate_commit_message(stats, total_add, total_del, lang)
    except Exception as e:
        print(f"AI 기반 커밋 메시지를 생성할 수 없습니다: {e}")
        return

    subprocess.run(["git", "commit", "-m", message])
    print("생성된 커밋 메시지:")
    print(message)

if __name__ == "__main__":
    main()
